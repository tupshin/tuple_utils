var searchIndex = {};
searchIndex['tuple_utils'] = {"items":[[8,"Append","tuple_utils","Helper trait to allow Appending of tuples",null,null],[16,"Output","","",0,null],[10,"append","","Append T onto the end of the tuple returning\na new tuple with the existing elements and T",0,{"inputs":[{"name":"append"},{"name":"t"}],"output":{"name":"output"}}],[8,"Prepend","","Helper trait to allow Perpending of tuples",null,null],[16,"Output","","",1,null],[10,"prepend","","Append T onto the start of the tuple returning\na new tuple with all the elements from shifted\nover one row and T in the first slot",1,{"inputs":[{"name":"prepend"},{"name":"t"}],"output":{"name":"output"}}],[8,"Merge","","Helper trait that allow for merging of tuples",null,null],[16,"Output","","",2,null],[10,"merge","","merge LHS with RHS returning a new tuple\nthat contains the elements of both tuples\nordering is preserved such that LHS elements\ncome before RHS elements.",2,{"inputs":[{"name":"merge"},{"name":"t"}],"output":{"name":"output"}}],[8,"Split","","Tries to split a tuple into two tuples\nif the tuple is odd sized the Right side will\ncontain the extra element",null,null],[16,"Left","","",3,null],[16,"Right","","",3,null],[10,"split","","",3,null]],"paths":[[8,"Append"],[8,"Prepend"],[8,"Merge"],[8,"Split"]]};
initSearch(searchIndex);
